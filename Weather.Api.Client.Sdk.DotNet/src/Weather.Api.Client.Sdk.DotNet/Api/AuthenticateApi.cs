/*
 * API
 *
 * An Api to perform weather forecasts
 *
 * The version of the OpenAPI document: 1
 * Contact: jon.doe@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Weather.Api.Client.Sdk.DotNet.Client;
using Weather.Api.Client.Sdk.DotNet.Model;

namespace Weather.Api.Client.Sdk.DotNet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <returns>Token</returns>
        Token Authenticate(LoginCredentials loginCredentials);

        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> AuthenticateWithHttpInfo(LoginCredentials loginCredentials);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> AuthenticateAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticates a user
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> AuthenticateWithHttpInfoAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticateApi : IAuthenticateApiSync, IAuthenticateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticateApi : IAuthenticateApi
    {
        private Weather.Api.Client.Sdk.DotNet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticateApi(string basePath)
        {
            this.Configuration = Weather.Api.Client.Sdk.DotNet.Client.Configuration.MergeConfigurations(
                Weather.Api.Client.Sdk.DotNet.Client.GlobalConfiguration.Instance,
                new Weather.Api.Client.Sdk.DotNet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Weather.Api.Client.Sdk.DotNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticateApi(Weather.Api.Client.Sdk.DotNet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Weather.Api.Client.Sdk.DotNet.Client.Configuration.MergeConfigurations(
                Weather.Api.Client.Sdk.DotNet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Weather.Api.Client.Sdk.DotNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthenticateApi(Weather.Api.Client.Sdk.DotNet.Client.ISynchronousClient client, Weather.Api.Client.Sdk.DotNet.Client.IAsynchronousClient asyncClient, Weather.Api.Client.Sdk.DotNet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Weather.Api.Client.Sdk.DotNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Weather.Api.Client.Sdk.DotNet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Weather.Api.Client.Sdk.DotNet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Weather.Api.Client.Sdk.DotNet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Weather.Api.Client.Sdk.DotNet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Authenticates a user Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <returns>Token</returns>
        public Token Authenticate(LoginCredentials loginCredentials)
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Token> localVarResponse = AuthenticateWithHttpInfo(loginCredentials);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticates a user Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <returns>ApiResponse of Token</returns>
        public Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Token> AuthenticateWithHttpInfo(LoginCredentials loginCredentials)
        {
            // verify the required parameter 'loginCredentials' is set
            if (loginCredentials == null)
            {
                throw new Weather.Api.Client.Sdk.DotNet.Client.ApiException(400, "Missing required parameter 'loginCredentials' when calling AuthenticateApi->Authenticate");
            }

            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginCredentials;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Token>("/api/Authenticate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Authenticate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticates a user Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> AuthenticateAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Token> localVarResponse = await AuthenticateWithHttpInfoAsync(loginCredentials, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticates a user Sample request:                    POST /api/authenticate      {         \&quot;username\&quot;: \&quot;anon\&quot;,         \&quot;password\&quot;: \&quot;Anon123\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Token>> AuthenticateWithHttpInfoAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginCredentials' is set
            if (loginCredentials == null)
            {
                throw new Weather.Api.Client.Sdk.DotNet.Client.ApiException(400, "Missing required parameter 'loginCredentials' when calling AuthenticateApi->Authenticate");
            }


            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loginCredentials;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Token>("/api/Authenticate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Authenticate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
