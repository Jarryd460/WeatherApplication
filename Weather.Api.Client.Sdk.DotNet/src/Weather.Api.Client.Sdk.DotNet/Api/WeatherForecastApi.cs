/*
 * API
 *
 * An Api to perform weather forecasts
 *
 * The version of the OpenAPI document: 1
 * Contact: jon.doe@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Weather.Api.Client.Sdk.DotNet.Client;
using Weather.Api.Client.Sdk.DotNet.Model;

namespace Weather.Api.Client.Sdk.DotNet.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeatherForecastApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    DELETE /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns></returns>
        void DeleteWeatherForecast(long id);

        /// <summary>
        /// Deletes a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    DELETE /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWeatherForecastWithHttpInfo(long id);
        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin)
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns>WeatherForecastDto</returns>
        WeatherForecastDto GetWeatherForecast(long id);

        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin)
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns>ApiResponse of WeatherForecastDto</returns>
        ApiResponse<WeatherForecastDto> GetWeatherForecastWithHttpInfo(long id);
        /// <summary>
        /// Gets all weather forecasts
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WeatherForecastDto&gt;</returns>
        List<WeatherForecastDto> GetWeatherForecasts();

        /// <summary>
        /// Gets all weather forecasts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WeatherForecastDto&gt;</returns>
        ApiResponse<List<WeatherForecastDto>> GetWeatherForecastsWithHttpInfo();
        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe)
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <returns>WeatherForecastDto</returns>
        WeatherForecastDto PostWeatherForecast(WeatherForecastDto weatherForecastDto);

        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe)
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <returns>ApiResponse of WeatherForecastDto</returns>
        ApiResponse<WeatherForecastDto> PostWeatherForecastWithHttpInfo(WeatherForecastDto weatherForecastDto);
        /// <summary>
        /// Updates a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <returns></returns>
        void PutWeatherForecast(long id, WeatherForecastDto weatherForecastDto);

        /// <summary>
        /// Updates a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutWeatherForecastWithHttpInfo(long id, WeatherForecastDto weatherForecastDto);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeatherForecastApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    DELETE /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWeatherForecastAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    DELETE /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWeatherForecastWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin)
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WeatherForecastDto</returns>
        System.Threading.Tasks.Task<WeatherForecastDto> GetWeatherForecastAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin)
        /// </summary>
        /// <remarks>
        /// Sample request:                    GET /api/weatherforecast/1
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WeatherForecastDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WeatherForecastDto>> GetWeatherForecastWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all weather forecasts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WeatherForecastDto&gt;</returns>
        System.Threading.Tasks.Task<List<WeatherForecastDto>> GetWeatherForecastsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all weather forecasts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WeatherForecastDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WeatherForecastDto>>> GetWeatherForecastsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe)
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WeatherForecastDto</returns>
        System.Threading.Tasks.Task<WeatherForecastDto> PostWeatherForecastAsync(WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe)
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WeatherForecastDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WeatherForecastDto>> PostWeatherForecastWithHttpInfoAsync(WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutWeatherForecastAsync(long id, WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a weather forecast
        /// </summary>
        /// <remarks>
        /// Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </remarks>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutWeatherForecastWithHttpInfoAsync(long id, WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeatherForecastApi : IWeatherForecastApiSync, IWeatherForecastApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WeatherForecastApi : IWeatherForecastApi
    {
        private Weather.Api.Client.Sdk.DotNet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecastApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WeatherForecastApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecastApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WeatherForecastApi(string basePath)
        {
            this.Configuration = Weather.Api.Client.Sdk.DotNet.Client.Configuration.MergeConfigurations(
                Weather.Api.Client.Sdk.DotNet.Client.GlobalConfiguration.Instance,
                new Weather.Api.Client.Sdk.DotNet.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Weather.Api.Client.Sdk.DotNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecastApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WeatherForecastApi(Weather.Api.Client.Sdk.DotNet.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Weather.Api.Client.Sdk.DotNet.Client.Configuration.MergeConfigurations(
                Weather.Api.Client.Sdk.DotNet.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Weather.Api.Client.Sdk.DotNet.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Weather.Api.Client.Sdk.DotNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WeatherForecastApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WeatherForecastApi(Weather.Api.Client.Sdk.DotNet.Client.ISynchronousClient client, Weather.Api.Client.Sdk.DotNet.Client.IAsynchronousClient asyncClient, Weather.Api.Client.Sdk.DotNet.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Weather.Api.Client.Sdk.DotNet.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Weather.Api.Client.Sdk.DotNet.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Weather.Api.Client.Sdk.DotNet.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Weather.Api.Client.Sdk.DotNet.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Weather.Api.Client.Sdk.DotNet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes a weather forecast Sample request:                    DELETE /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns></returns>
        public void DeleteWeatherForecast(long id)
        {
            DeleteWeatherForecastWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes a weather forecast Sample request:                    DELETE /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Object> DeleteWeatherForecastWithHttpInfo(long id)
        {
            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/WeatherForecast/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a weather forecast Sample request:                    DELETE /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWeatherForecastAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWeatherForecastWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a weather forecast Sample request:                    DELETE /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Object>> DeleteWeatherForecastWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/WeatherForecast/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin) Sample request:                    GET /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns>WeatherForecastDto</returns>
        public WeatherForecastDto GetWeatherForecast(long id)
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto> localVarResponse = GetWeatherForecastWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin) Sample request:                    GET /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <returns>ApiResponse of WeatherForecastDto</returns>
        public Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto> GetWeatherForecastWithHttpInfo(long id)
        {
            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WeatherForecastDto>("/api/WeatherForecast/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin) Sample request:                    GET /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WeatherForecastDto</returns>
        public async System.Threading.Tasks.Task<WeatherForecastDto> GetWeatherForecastAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto> localVarResponse = await GetWeatherForecastWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the weather forecast with the specified id (Auth roles: Admin) Sample request:                    GET /api/weatherforecast/1
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WeatherForecastDto)</returns>
        public async System.Threading.Tasks.Task<Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto>> GetWeatherForecastWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WeatherForecastDto>("/api/WeatherForecast/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all weather forecasts 
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WeatherForecastDto&gt;</returns>
        public List<WeatherForecastDto> GetWeatherForecasts()
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<List<WeatherForecastDto>> localVarResponse = GetWeatherForecastsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all weather forecasts 
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WeatherForecastDto&gt;</returns>
        public Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<List<WeatherForecastDto>> GetWeatherForecastsWithHttpInfo()
        {
            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<WeatherForecastDto>>("/api/WeatherForecast", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeatherForecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all weather forecasts 
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;WeatherForecastDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WeatherForecastDto>> GetWeatherForecastsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<List<WeatherForecastDto>> localVarResponse = await GetWeatherForecastsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all weather forecasts 
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;WeatherForecastDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<List<WeatherForecastDto>>> GetWeatherForecastsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<WeatherForecastDto>>("/api/WeatherForecast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeatherForecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe) Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <returns>WeatherForecastDto</returns>
        public WeatherForecastDto PostWeatherForecast(WeatherForecastDto weatherForecastDto)
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto> localVarResponse = PostWeatherForecastWithHttpInfo(weatherForecastDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe) Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <returns>ApiResponse of WeatherForecastDto</returns>
        public Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto> PostWeatherForecastWithHttpInfo(WeatherForecastDto weatherForecastDto)
        {
            // verify the required parameter 'weatherForecastDto' is set
            if (weatherForecastDto == null)
            {
                throw new Weather.Api.Client.Sdk.DotNet.Client.ApiException(400, "Missing required parameter 'weatherForecastDto' when calling WeatherForecastApi->PostWeatherForecast");
            }

            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = weatherForecastDto;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WeatherForecastDto>("/api/WeatherForecast", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe) Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WeatherForecastDto</returns>
        public async System.Threading.Tasks.Task<WeatherForecastDto> PostWeatherForecastAsync(WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto> localVarResponse = await PostWeatherForecastWithHttpInfoAsync(weatherForecastDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a weather forecast (Auth policies: JaneDoe) Sample request:                    POST /api/weatherforecast      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WeatherForecastDto)</returns>
        public async System.Threading.Tasks.Task<Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<WeatherForecastDto>> PostWeatherForecastWithHttpInfoAsync(WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'weatherForecastDto' is set
            if (weatherForecastDto == null)
            {
                throw new Weather.Api.Client.Sdk.DotNet.Client.ApiException(400, "Missing required parameter 'weatherForecastDto' when calling WeatherForecastApi->PostWeatherForecast");
            }


            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = weatherForecastDto;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WeatherForecastDto>("/api/WeatherForecast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a weather forecast Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <returns></returns>
        public void PutWeatherForecast(long id, WeatherForecastDto weatherForecastDto)
        {
            PutWeatherForecastWithHttpInfo(id, weatherForecastDto);
        }

        /// <summary>
        /// Updates a weather forecast Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Object> PutWeatherForecastWithHttpInfo(long id, WeatherForecastDto weatherForecastDto)
        {
            // verify the required parameter 'weatherForecastDto' is set
            if (weatherForecastDto == null)
            {
                throw new Weather.Api.Client.Sdk.DotNet.Client.ApiException(400, "Missing required parameter 'weatherForecastDto' when calling WeatherForecastApi->PutWeatherForecast");
            }

            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = weatherForecastDto;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/WeatherForecast/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a weather forecast Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutWeatherForecastAsync(long id, WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PutWeatherForecastWithHttpInfoAsync(id, weatherForecastDto, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates a weather forecast Sample request:                    PUT /api/weatherforecast/1      {         \&quot;id\&quot;: 1,         \&quot;date\&quot;: \&quot;2022-01-28T18:29:19.224Z\&quot;,         \&quot;temperaturec\&quot;: 47,         \&quot;summary\&quot;: \&quot;Cloudy but very hot and humid\&quot;      }
        /// </summary>
        /// <exception cref="Weather.Api.Client.Sdk.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the weather forecast</param>
        /// <param name="weatherForecastDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Weather.Api.Client.Sdk.DotNet.Client.ApiResponse<Object>> PutWeatherForecastWithHttpInfoAsync(long id, WeatherForecastDto weatherForecastDto, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'weatherForecastDto' is set
            if (weatherForecastDto == null)
            {
                throw new Weather.Api.Client.Sdk.DotNet.Client.ApiException(400, "Missing required parameter 'weatherForecastDto' when calling WeatherForecastApi->PutWeatherForecast");
            }


            Weather.Api.Client.Sdk.DotNet.Client.RequestOptions localVarRequestOptions = new Weather.Api.Client.Sdk.DotNet.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/problem+json"
            };

            var localVarContentType = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Weather.Api.Client.Sdk.DotNet.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = weatherForecastDto;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/WeatherForecast/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutWeatherForecast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
