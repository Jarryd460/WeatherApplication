<Project Sdk="Microsoft.NET.Sdk.Web">
	<PropertyGroup>
		<TargetFramework>net6.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
		<NoWarn>$(NoWarn);1591</NoWarn>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="FluentValidation.AspNetCore" Version="10.3.6" />
		<PackageReference Include="Hellang.Middleware.ProblemDetails" Version="6.4.0" />
		<PackageReference Include="MicroElements.Swashbuckle.FluentValidation" Version="5.4.0" />
		<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="6.0.2" />
		<PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="6.0.2" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="6.0.2" />
		<PackageReference Include="Swashbuckle.AspNetCore" Version="6.2.3" />
		<PackageReference Include="Swashbuckle.AspNetCore.Annotations" Version="6.2.3" />
		<PackageReference Include="Swashbuckle.AspNetCore.Filters" Version="7.0.2" />
	</ItemGroup>
	
	<!--A target used for clearing out folders before generating Sdk. We however do not want to do this if we have custom classes/methods
		that extend the Api. The generated Sdk provides us with partial classes meaning we can add additional functionality/methods-->
	<!--<Target Name="RemoveGeneratedSDKs" BeforeTargets="Build">
		<RemoveDir Directories="$(SolutionDir)Weather.Api.Client.Sdk.DotNet" />
		<RemoveDir Directories="$(SolutionDir)Weather.Api.Client.Sdk.Typescript" />
	</Target>-->

	<Target Name="GenerateSwaggerDocument" AfterTargets="Build">
		<Exec Command="dotnet tool restore" />
		<!-- Check if swagger is installed -->
		<Exec Command="swagger" IgnoreExitCode="true" ContinueOnError="true">
			<!-- Returns 9009 when not installed and 1 when already installed -->
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<!-- Install when not installed -->
		<Exec Condition="'$(ErrorCode)' != '1'" Command="dotnet tool install Swashbuckle.AspNetCore.Cli --global">
			<!-- Returns 1 when tool does not exist and 0 when successfully installed -->
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<!-- $(ProjectDir) -->
		<Exec Condition="'$(ErrorCode)' == '0' or '$(ErrorCode)' == '1'" Command="swagger tofile --output $(OutputPath)swagger.json $(OutputPath)$(AssemblyName).dll v1" />
	</Target>

	<Target Name="GenerateSDK" AfterTargets="GenerateSwaggerDocument">
		<Exec Command="node --version" ContinueOnError="true">
			<!-- Returns 1 when not installed and 0 when already installed -->
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Exec Command="openapi-generator-cli version" ContinueOnError="true">
			<!-- Returns 9009 when not installed and 0 when already installed -->
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Exec Condition="'$(ErrorCode)' != '0'" Command="npm install @openapitools/openapi-generator-cli -g">
			<!-- Returns 1 when tool does not exist and 0 when successfully installed -->
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>		
		<Exec Command="openapi-generator-cli generate -i $(OutputPath)swagger.json -g csharp-netcore -o $(SolutionDir)Weather.Api.Client.Sdk.DotNet --additional-properties packageName=Weather.Api.Client.Sdk.DotNet" />
		<Exec Command="openapi-generator-cli generate -i $(OutputPath)swagger.json -g typescript-node -o $(SolutionDir)Weather.Api.Client.Sdk.Typescript --additional-properties=packageName=Weather.Api.Client.Sdk.Typescript,npmName=Weather.Api.Client.Sdk.Typescript" />
	</Target>
</Project>
